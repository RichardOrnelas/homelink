name: "New Pull Request Web App"

on:
  pull_request:
    branches: ["main"]

jobs:
  tests:
    name: Run Tests
    if: ${{ ! github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    permissions: 
      contents: read
    # should limit to one test run per branch that is PR'd
    concurrency:
      group: ${{github.head_ref}}-tests
      cancel-in-progress: true
    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/hive_test
      DEFAULT_QUEUE: foo
      HMAC_SECRET: 59c45944ec6025c526a68ae8ada55534a99083af0c287e97dabcd92b97d3e1e111fa2386ce7201c008d13fcc495ad0a56838a1e66e022b668ebbffcd99aadb1b

    services:
      postgres:
        image: postgres:15
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis
        ports: ["6379:6379"]

    steps:
      - uses: actions/checkout@master
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          
      - uses: TimonVS/pr-labeler-action@v3
        with:
          configuration-path: .github/pr-labeler.yml # optional, .github/pr-labeler.yml is the default value
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Install PostgreSQL
        run: sudo apt-get -yqq install libpq-dev poppler-utils

      - name: Run Bundle Install
        run: |
          gem install poppler
          bundle install --jobs 4 --retry 3

      - name: Setup Database
        run: bin/rails db:create db:migrate;

      - name: Run RSpec Tests
        run: |
          bundle exec rspec --exclude-pattern 'spec/controllers/*.rb'

      # Surfaces rspec results to a github comment
      - name: Simplecov Report
        uses: aki77/simplecov-report-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          failedThreshold: "80"
  
  terraform_plan:
    name: Terraform Plan
    if: ${{ ! github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.ref }}-tf-plan
      cancel-in-progress: true
    defaults:
      run:
        working-directory: .infrastructure
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@master
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            infrastructure:
              - '.infrastructure/**'
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Workspace
        id: workspace
        run: terraform workspace select sandbox

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var-file="sandbox.tfvars"
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
  deploy_test_env:
    name: Deploy Test Environment
    if: ${{ ! github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.ref }}-test-env
      cancel-in-progress: true
    defaults:
      run:
        working-directory: .infrastructure
    permissions:
      pull-requests: write
      contents: read
    steps: 
      - uses: actions/checkout@master
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: false

      - name: Terraform Init
        id: init
        run: terraform init

      - name: New Terraform Workspace
        id: workspace
        run: terraform workspace new ${{ github.ref_name }}


      - name: Terraform Apply
        id: apply
        run: terraform apply --auto-approve
        continue-on-error: false
